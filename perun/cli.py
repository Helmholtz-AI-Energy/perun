"""Command line api definition.

Uses click https://click.palletsprojects.com/en/8.1.x/ to manage complex cmdline configurations.
"""
from pathlib import Path

import click

import perun
from perun import log
from perun.configuration import config, read_custom_config, save_to_config_callback
from perun.io.io import IOFormat


@click.group()
@click.version_option(version=perun.__version__)
@click.option(
    "-c",
    "--configuration",
    default="./.perun.ini",
    help="Path to configuration file",
    type=click.Path(exists=False, dir_okay=False, readable=True),
    is_eager=True,
    callback=read_custom_config,
    expose_value=False,
)
# Output option
@click.option(
    "-n",
    "--app_name",
    help="Name of the monitored application. The name is used to distinguish between multiple applications in the same directory. If left empty, the filename will be  used.",
    callback=save_to_config_callback,
    expose_value=False,
)
@click.option(
    "-i",
    "--run_id",
    help="Unique id of the latest run of the application. If left empty, perun will use the SLURM job id, or the current date.",
    callback=save_to_config_callback,
    expose_value=False,
)
@click.option(
    "-f",
    "--format",
    type=click.Choice([format.value for format in IOFormat]),
    help="Report format.",
    callback=save_to_config_callback,
    expose_value=False,
)
@click.option(
    "--data_out",
    type=click.Path(exists=False, dir_okay=True, file_okay=False),
    help="Where to save the output files, defaults to the current working directory.",
    callback=save_to_config_callback,
    expose_value=False,
)
@click.option(
    "--raw/--no-raw",
    default=False,
    help="Use the flag '--raw' if you need access to all the raw data collected by perun. The output will be saved on an hdf5 file on the perun data output location.",
    callback=save_to_config_callback,
    expose_value=False,
)
# Sampling Options
@click.option(
    "-f",
    "--frequency",
    type=float,
    help="sampling frequency (in Hz)",
    callback=save_to_config_callback,
    expose_value=False,
)
# Post processing options
@click.option(
    "--pue",
    type=float,
    help="Data center Power usage efficiency",
    callback=save_to_config_callback,
    expose_value=False,
)
@click.option(
    "--emissions-factor",
    type=float,
    help="Emissions factor at compute resource location",
    callback=save_to_config_callback,
    expose_value=False,
)
@click.option(
    "--price-factor",
    type=float,
    help="Electricity price factor at compute resource location",
    callback=save_to_config_callback,
    expose_value=False,
)
# Debug Options
@click.option(
    "-l",
    "--log_lvl",
    type=click.Choice(["DEBUG", "INFO", "WARN", "ERROR", "CRITICAL"]),
    help="Loggging level",
    callback=save_to_config_callback,
    expose_value=False,
)
def cli():
    """Perun: Energy measuring and reporting tool."""
    log.setLevel(config.get("debug", "log_lvl"))


@cli.command()
@click.option(
    "--default",
    is_flag=True,
    show_default=True,
    default=False,
    help="Print default configuration",
)
def showconf(default: bool):
    """Print current perun configuration in INI format."""
    import sys

    from perun.configuration import _default_config

    if default:
        config.read_dict(_default_config)
        config.write(sys.stdout)
    else:
        config.write(sys.stdout)


@cli.command()
@click.argument("exp_hdf5", type=click.Path(exists=True))
def postprocess(exp_hdf5: str):
    """
    Apply post-processing to EXP_HDF5 experiment file.

    EXP_HDF5 is an hdf5 file generated by perun after monitoring a script, containing data gathered from hardware devices.
    """
    # from perun import COMM_WORLD
    # from perun.perun import postprocessing


@cli.command()
@click.argument("exp_hdf5", type=click.Path(exists=True))
def report(exp_hdf5: str):
    """Print consumption report from EXP_HDF5 on the command line on the desired format.

    EXP_HDF5 is an hdf5 file generated by perun after monitoring a script, containing data gathered from hardware devices.
    """
    # from perun import COMM_WORLD
    # from perun.report import report as _report

    # expPath = Path(exp_hdf5)
    # expStrg = ExperimentStorage(expPath, COMM_WORLD)
    # print(_report(expStrg, format=config.get("report", "format")))
    # expStrg.close()


@cli.command(context_settings={"ignore_unknown_options": True})
@click.argument("script", type=click.Path(exists=True))
@click.argument("script_args", nargs=-1)
def monitor(
    script: str,
    script_args: tuple,
):
    """
    Gather power consumption from hardware devices while SCRIPT [SCRIPT_ARGS] is running.

    SCRIPT is a path to the python script to monitor, run with arguments SCRIPT_ARGS.
    """
    # Setup script arguments
    import sys

    from perun.perun import monitor_application

    filePath: Path = Path(script)
    log.debug(f"Script path: {filePath}")
    argIndex = sys.argv.index(script)
    sys.argv = sys.argv[argIndex:]
    log.debug(f"Script args: { sys.argv }")

    sys.path.insert(0, str(filePath.parent.absolute()))

    monitor_application(filePath)


def main():
    """Cli entrypoint."""
    cli(auto_envvar_prefix="PERUN")
